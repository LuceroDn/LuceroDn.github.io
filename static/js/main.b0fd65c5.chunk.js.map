{"version":3,"sources":["Components/NavBar.js","Components/Box.js","Components/Presentation.js","Components/AboutMe.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","M","AutoInit","react_default","a","createElement","className","href","data-target","id","Component","Box","Presentation","Components_NavBar","Components_Box","AboutMe","App","Components_Presentation","Components_AboutMe","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2RAsCeA,8LAhCPC,IAAEC,4CAKN,OACCC,EAAAC,EAAAC,cAAA,cACGF,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,MAAMC,cAAY,cAAcF,UAAU,mBAAkBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAb,SACpEH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,8BACZH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,aAAR,SACJJ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,eAAR,eACJJ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,oBAAR,eACJJ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,eAAR,cAKVJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAUG,GAAG,eACzBN,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,aAAR,SACJJ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,eAAR,eACJJ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,oBAAR,eACJJ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,eAAR,oBA1BaG,aCkBNC,mLAfX,OACDR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,cAEJH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAb,gCARUI,aCgBHE,mLAZX,OACIT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAACQ,EAAD,MACAV,EAAAC,EAAAC,cAACS,EAAD,cANeJ,aCeZK,mLAdX,OACIZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAd,iBAEAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,8NARUI,aCkBPM,mLAVX,OACAb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACY,EAAD,MACAd,EAAAC,EAAAC,cAACa,EAAD,cALYR,aCGES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b0fd65c5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport M from \"materialize-css\";\r\n\r\nclass NavBar extends Component {\r\ncomponentDidMount() {\r\n        // Auto initialize all the things!\r\n        M.AutoInit();\r\n    }\r\n\r\n\r\n  render() {\r\n    return (\r\n     <header>\r\n        <nav>\r\n    <div className=\"nav-wrapper\">\r\n      <a href=\"cvv\" data-target=\"mobile-demo\" className=\"sidenav-trigger\"><i className=\"material-icons\">menu</i></a>\r\n      <ul className=\"right hide-on-med-and-down\">\r\n        <li><a href=\"sass.html\">Sass</a></li>\r\n        <li><a href=\"badges.html\">Components</a></li>\r\n        <li><a href=\"collapsible.html\">Javascript</a></li>\r\n        <li><a href=\"mobile.html\">Mobile</a></li>\r\n      </ul>\r\n    </div>\r\n  </nav>\r\n\r\n  <ul className=\"sidenav\" id=\"mobile-demo\">\r\n    <li><a href=\"sass.html\">Sass</a></li>\r\n    <li><a href=\"badges.html\">Components</a></li>\r\n    <li><a href=\"collapsible.html\">Javascript</a></li>\r\n    <li><a href=\"mobile.html\">Mobile</a></li>\r\n  </ul>\r\n\r\n     </header>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\n//import logo from \"../img/logo.png\";\r\n\r\n\r\nclass Box extends Component {\r\n  render() {\r\n    return (\r\n   <div className=\"box\">\r\n    <div>\r\n        <h1 className=\"name\">Lucero Dn</h1>\r\n    </div>\r\n    <div>\r\n        <p className=\"FrontE\">Front-End Developer</p>\r\n    </div>\r\n   </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Box;","import React, { Component } from \"react\";\r\nimport NavBar from \"./NavBar\";\r\nimport Box from \"./Box\";\r\n\r\n\r\nclass Presentation extends Component {\r\n    \r\n  render() {\r\n    return (\r\n        <div className=\"background1\">\r\n            <NavBar />\r\n            <Box />\r\n  \r\n        </div>\r\n        \r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Presentation;\r\n","import React, { Component } from \"react\";\r\n\r\n\r\nclass AboutMe extends Component {\r\n    \r\n  render() {\r\n    return (\r\n        <div className=\"backgroundAbout\">\r\n            <div>\r\n            <h2 className=\"aboutMe\">Acerca de Mi</h2>\r\n            </div>\r\n            <p className=\"textAbout\">Hola, soy Lucero, soy desarrolladora web y administradora de empresas. Me gusta mucho viajar, leer y escuchar música. &nbs\r\n             Aquí podrás encontrar algunos proyectos en los que he trabajado en Laboratoria</p>\r\n        </div>\r\n        \r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default AboutMe;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport 'materialize-css/dist/css/materialize.min.css';\nimport Presentation from \"./Components/Presentation\";\nimport AboutMe from \"./Components/AboutMe\";\n\n\n  \n\nclass App extends Component {\n  render() {\n    return (\n    <div>\n      <Presentation />\n      <AboutMe />\n    </div>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}